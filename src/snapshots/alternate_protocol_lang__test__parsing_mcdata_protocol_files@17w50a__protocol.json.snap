---
source: src/main.rs
expression: result
input_file: minecraft-data/data/pc/17w50a/protocol.json
snapshot_kind: text
---
type VarInt = never;
// type f64 = never;
// type i16 = never;
// type i8 = never;
// type i32 = never;
// type UUID = never;
// type EntityMetadata = never;
// type Position = never;
// type u8 = never;
// type bool = never;
// type Slot = never;
// type f32 = never;
type Void = never;
// type i64 = never;
// type OptionalNbt = never;
type RestBuffer = never;
// type Nbt = never;
// type VarLong = never;
// type u16 = never;
type Arr<T> = never;
type BitField<T> = never;
type Buffer<T> = never;
type Record_<K, V, Size = varint> = never;
type topBitSetTerminatedArray<T> = never;
type pstring<T> = never;
type entityMetadataLoop<T> = never;
type option<T> = never;
type String_ = never;
type ParticleData<T> = never;


type UUID = never /* native */


type array = never /* native */


type bitfield = never /* native */


type bool = never /* native */


type buffer = never /* native */


type container = never /* native */


type entityMetadata = entityMetadataLoop<{ ty: { _anon_0: { key: u8, type: i8 }, value: entityMetadataItem<{ compareTo: "type" }> }, endVal: 255 }>


type entityMetadataItem = { "0": i8 ;"1": VarInt ;"10": VarInt ;"11": option<UUID> ;"12": VarInt ;"13": Nbt ;"2": f32 ;"3": String_ ;"4": String_ ;"5": Slot ;"6": bool ;"7": { pitch: f32, roll: f32, yaw: f32 } ;"8": position ;"9": option<position>; _: Void } /* .get($compareTo) */


type f32 = never /* native */


type f64 = never /* native */


type i16 = never /* native */


type i32 = never /* native */


type i64 = never /* native */


type i8 = never /* native */


type nbt = never /* native */


type optionalNbt = never /* native */


type position = BitField<{ fields: [{ name: "x", size: 26, signed: true }, { name: "y", size: 12, signed: true }, { name: "z", size: 26, signed: true }] }>


type restBuffer = never /* native */


type slot = { _anon_1: { "-1": Void; _: { itemCount: i8, nbtData: OptionalNbt } } /* .get(blockId) */, blockId: i16 }


type u16 = never /* native */


type u8 = never /* native */


type varint = never /* native */


type varlong = never /* native */

namespace handshaking.to_client {

interface packet {
	name: /* empty mapper */ any,
	params: /* empty switch */ any,
}

}
namespace handshaking.to_server {

interface packet {
	name: { 0x00: "set_protocol"; 0xfe: "legacy_server_list_ping"; _ : Void; }[] /* mapper */,
	params: { "legacy_server_list_ping": packet_legacy_server_list_ping ;"set_protocol": packet_set_protocol; _: Void } /* .get(name) */,
}


interface packet_legacy_server_list_ping {
	payload: u8,
}


interface packet_set_protocol {
	protocolVersion: VarInt,
	serverHost: String_,
	serverPort: u16,
	nextState: VarInt,
}

}
namespace status.to_client {

interface packet {
	name: { 0x00: "server_info"; 0x01: "ping"; _ : Void; }[] /* mapper */,
	params: { "ping": packet_ping ;"server_info": packet_server_info; _: Void } /* .get(name) */,
}


interface packet_ping {
	time: i64,
}


interface packet_server_info {
	response: String_,
}

}
namespace status.to_server {

interface packet {
	name: { 0x00: "ping_start"; 0x01: "ping"; _ : Void; }[] /* mapper */,
	params: { "ping": packet_ping ;"ping_start": packet_ping_start; _: Void } /* .get(name) */,
}


interface packet_ping {
	time: i64,
}


interface packet_ping_start {

}

}
namespace login.to_client {

interface packet {
	name: { 0x00: "disconnect"; 0x01: "encryption_begin"; 0x02: "success"; 0x03: "compress"; _ : Void; }[] /* mapper */,
	params: { "compress": packet_compress ;"disconnect": packet_disconnect ;"encryption_begin": packet_encryption_begin ;"success": packet_success; _: Void } /* .get(name) */,
}


interface packet_compress {
	threshold: VarInt,
}


interface packet_disconnect {
	reason: String_,
}


interface packet_encryption_begin {
	serverId: String_,
	publicKey: Buffer<{ countType: VarInt }>,
	verifyToken: Buffer<{ countType: VarInt }>,
}


interface packet_success {
	uuid: String_,
	username: String_,
}

}
namespace login.to_server {

interface packet {
	name: { 0x00: "login_start"; 0x01: "encryption_begin"; _ : Void; }[] /* mapper */,
	params: { "encryption_begin": packet_encryption_begin ;"login_start": packet_login_start; _: Void } /* .get(name) */,
}


interface packet_encryption_begin {
	sharedSecret: Buffer<{ countType: VarInt }>,
	verifyToken: Buffer<{ countType: VarInt }>,
}


interface packet_login_start {
	username: String_,
}

}
namespace play.to_client {

interface packet {
	name: { 0x00: "spawn_entity"; 0x01: "spawn_entity_experience_orb"; 0x02: "spawn_entity_weather"; 0x03: "spawn_entity_living"; 0x04: "spawn_entity_painting"; 0x05: "named_entity_spawn"; 0x06: "animation"; 0x07: "statistics"; 0x08: "block_break_animation"; 0x09: "tile_entity_data"; 0x0a: "block_action"; 0x0b: "block_change"; 0x0c: "boss_bar"; 0x0d: "difficulty"; 0x0e: "chat"; 0x0f: "multi_block_change"; 0x10: "tab_complete"; 0x11: "declare_commands"; 0x12: "transaction"; 0x13: "close_window"; 0x14: "open_window"; 0x15: "window_items"; 0x16: "craft_progress_bar"; 0x17: "set_slot"; 0x18: "set_cooldown"; 0x19: "custom_payload"; 0x1a: "named_sound_effect"; 0x1b: "kick_disconnect"; 0x1c: "entity_status"; 0x1d: "explosion"; 0x1e: "unload_chunk"; 0x1f: "game_state_change"; 0x20: "keep_alive"; 0x21: "map_chunk"; 0x22: "world_event"; 0x23: "world_particles"; 0x24: "login"; 0x25: "map"; 0x26: "entity"; 0x27: "rel_entity_move"; 0x28: "entity_move_look"; 0x29: "entity_look"; 0x2a: "vehicle_move"; 0x2b: "open_sign_entity"; 0x2c: "craft_recipe_response"; 0x2d: "abilities"; 0x2e: "combat_event"; 0x2f: "player_info"; 0x30: "position"; 0x31: "bed"; 0x32: "unlock_recipes"; 0x33: "entity_destroy"; 0x34: "remove_entity_effect"; 0x35: "resource_pack_send"; 0x36: "respawn"; 0x37: "entity_head_rotation"; 0x38: "select_advancement_tab"; 0x39: "world_border"; 0x3a: "camera"; 0x3b: "held_item_slot"; 0x3c: "scoreboard_display_objective"; 0x3d: "entity_metadata"; 0x3e: "attach_entity"; 0x3f: "entity_velocity"; 0x40: "entity_equipment"; 0x41: "experience"; 0x42: "update_health"; 0x43: "scoreboard_objective"; 0x44: "set_passengers"; 0x45: "teams"; 0x46: "scoreboard_score"; 0x47: "spawn_position"; 0x48: "update_time"; 0x49: "title"; 0x4a: "stop_sound"; 0x4b: "sound_effect"; 0x4c: "playerlist_header"; 0x4d: "collect"; 0x4e: "entity_teleport"; 0x4f: "advancements"; 0x50: "entity_update_attributes"; 0x51: "entity_effect"; 0x52: "declare_recipes"; 0x53: "tags"; _ : Void; }[] /* mapper */,
	params: { "abilities": packet_abilities ;"advancements": packet_advancements ;"animation": packet_animation ;"attach_entity": packet_attach_entity ;"bed": packet_bed ;"block_action": packet_block_action ;"block_break_animation": packet_block_break_animation ;"block_change": packet_block_change ;"boss_bar": packet_boss_bar ;"camera": packet_camera ;"chat": packet_chat ;"close_window": packet_close_window ;"collect": packet_collect ;"combat_event": packet_combat_event ;"craft_progress_bar": packet_craft_progress_bar ;"craft_recipe_response": packet_craft_recipe_response ;"custom_payload": packet_custom_payload ;"declare_commands": packet_declare_commands ;"declare_recipes": packet_declare_recipes ;"difficulty": packet_difficulty ;"entity": packet_entity ;"entity_destroy": packet_entity_destroy ;"entity_effect": packet_entity_effect ;"entity_equipment": packet_entity_equipment ;"entity_head_rotation": packet_entity_head_rotation ;"entity_look": packet_entity_look ;"entity_metadata": packet_entity_metadata ;"entity_move_look": packet_entity_move_look ;"entity_status": packet_entity_status ;"entity_teleport": packet_entity_teleport ;"entity_update_attributes": packet_entity_update_attributes ;"entity_velocity": packet_entity_velocity ;"experience": packet_experience ;"explosion": packet_explosion ;"game_state_change": packet_game_state_change ;"held_item_slot": packet_held_item_slot ;"keep_alive": packet_keep_alive ;"kick_disconnect": packet_kick_disconnect ;"login": packet_login ;"map": packet_map ;"map_chunk": packet_map_chunk ;"multi_block_change": packet_multi_block_change ;"named_entity_spawn": packet_named_entity_spawn ;"named_sound_effect": packet_named_sound_effect ;"open_sign_entity": packet_open_sign_entity ;"open_window": packet_open_window ;"player_info": packet_player_info ;"playerlist_header": packet_playerlist_header ;"position": packet_position ;"rel_entity_move": packet_rel_entity_move ;"remove_entity_effect": packet_remove_entity_effect ;"resource_pack_send": packet_resource_pack_send ;"respawn": packet_respawn ;"scoreboard_display_objective": packet_scoreboard_display_objective ;"scoreboard_objective": packet_scoreboard_objective ;"scoreboard_score": packet_scoreboard_score ;"select_advancement_tab": packet_select_advancement_tab ;"set_cooldown": packet_set_cooldown ;"set_passengers": packet_set_passengers ;"set_slot": packet_set_slot ;"sound_effect": packet_sound_effect ;"spawn_entity": packet_spawn_entity ;"spawn_entity_experience_orb": packet_spawn_entity_experience_orb ;"spawn_entity_living": packet_spawn_entity_living ;"spawn_entity_painting": packet_spawn_entity_painting ;"spawn_entity_weather": packet_spawn_entity_weather ;"spawn_position": packet_spawn_position ;"statistics": packet_statistics ;"stop_sound": packet_stop_sound ;"tab_complete": packet_tab_complete ;"tags": packet_tags ;"teams": packet_teams ;"tile_entity_data": packet_tile_entity_data ;"title": packet_title ;"transaction": packet_transaction ;"unload_chunk": packet_unload_chunk ;"unlock_recipes": packet_unlock_recipes ;"update_health": packet_update_health ;"update_time": packet_update_time ;"vehicle_move": packet_vehicle_move ;"window_items": packet_window_items ;"world_border": packet_world_border ;"world_event": packet_world_event ;"world_particles": packet_world_particles; _: Void } /* .get(name) */,
}


interface packet_abilities {
	flags: i8,
	flyingSpeed: f32,
	walkingSpeed: f32,
}


interface packet_advancements {
	reset: bool,
	advancementMapping: Record_<String_, { criteria: Record_<String_, Void>, displayData: option<{ backgroundTexture: { "1": String_; _: Void } /* .get(flags/has_background_texture) */, description: String_, flags: BitField<{ fields: [{ name: "_unused", size: 29, signed: false }, { name: "has_background_texture", size: 1, signed: false }, { name: "hidden", size: 1, signed: false }, { name: "show_toast", size: 1, signed: false }] }>, frameType: VarInt, icon: Slot, title: String_, xCord: f32, yCord: f32 }>, parentId: option<String_>, requirements: String_[][] }>,
	identifiers: String_[],
	progressMapping: Record_<String_, { criterionIdentifier: String_, criterionProgress: option<i64> }[]>,
}


interface packet_animation {
	entityId: VarInt,
	animation: u8,
}


interface packet_attach_entity {
	entityId: i32,
	vehicleId: i32,
}


interface packet_bed {
	entityId: VarInt,
	location: position,
}


interface packet_block_action {
	location: position,
	byte1: u8,
	byte2: u8,
	blockId: VarInt,
}


interface packet_block_break_animation {
	entityId: VarInt,
	location: position,
	destroyStage: i8,
}


interface packet_block_change {
	location: position,
	type: VarInt,
}


interface packet_boss_bar {
	entityUUID: UUID,
	action: VarInt,
	title: { "0": String_ ;"3": String_; _: Void } /* .get(action) */,
	health: { "0": f32 ;"2": f32; _: Void } /* .get(action) */,
	color: { "0": VarInt ;"4": VarInt; _: Void } /* .get(action) */,
	dividers: { "0": VarInt ;"4": VarInt; _: Void } /* .get(action) */,
	flags: { "0": u8 ;"5": u8; _: Void } /* .get(action) */,
}


interface packet_camera {
	cameraId: VarInt,
}


interface packet_chat {
	message: String_,
	position: i8,
}


interface packet_close_window {
	windowId: u8,
}


interface packet_collect {
	collectedEntityId: VarInt,
	collectorEntityId: VarInt,
	pickupItemCount: VarInt,
}


interface packet_combat_event {
	event: VarInt,
	duration: { "1": VarInt; _: Void } /* .get(event) */,
	playerId: { "2": VarInt; _: Void } /* .get(event) */,
	entityId: { "1": i32 ;"2": i32; _: Void } /* .get(event) */,
	message: { "2": String_; _: Void } /* .get(event) */,
}


interface packet_craft_progress_bar {
	windowId: u8,
	property: i16,
	value: i16,
}


interface packet_craft_recipe_response {
	windowId: i8,
	recipe: String_,
}


interface packet_custom_payload {
	channel: String_,
	data: RestBuffer,
}


interface packet_declare_commands {
	nodes: { children: VarInt[], extraNodeData: { "0": Void ;"1": String_ ;"2": { name: String_, parser: String_, properties: { "brigadier:double": { flags: BitField<{ fields: [{ name: "max_present", size: 1, signed: false }, { name: "min_present", size: 1, signed: false }, { name: "unused", size: 6, signed: false }] }>, max: { "1": f64; _: Void } /* .get(flags/max_present) */, min: { "1": f64; _: Void } /* .get(flags/min_present) */ } ;"brigadier:float": { flags: BitField<{ fields: [{ name: "max_present", size: 1, signed: false }, { name: "min_present", size: 1, signed: false }, { name: "unused", size: 6, signed: false }] }>, max: { "1": f32; _: Void } /* .get(flags/max_present) */, min: { "1": f32; _: Void } /* .get(flags/min_present) */ } ;"brigadier:integer": { flags: BitField<{ fields: [{ name: "max_present", size: 1, signed: false }, { name: "min_present", size: 1, signed: false }, { name: "unused", size: 6, signed: false }] }>, max: { "1": i32; _: Void } /* .get(flags/max_present) */, min: { "1": i32; _: Void } /* .get(flags/min_present) */ } ;"brigadier:long": { flags: BitField<{ fields: [{ name: "max_present", size: 1, signed: false }, { name: "min_present", size: 1, signed: false }, { name: "unused", size: 6, signed: false }] }>, max: { "1": i64; _: Void } /* .get(flags/max_present) */, min: { "1": i64; _: Void } /* .get(flags/min_present) */ } ;"brigadier:string": VarInt ;"minecraft:entity": i8 ;"minecraft:range": bool ;"minecraft:score_holder": i8; _: Void } /* .get(parser) */, suggests: { "1": String_; _: Void } /* .get(../flags/has_custom_suggestions) */ }; _: Void } /* .get(flags/command_node_type) */, flags: BitField<{ fields: [{ name: "command_node_type", size: 2, signed: false }, { name: "has_command", size: 1, signed: false }, { name: "has_custom_suggestions", size: 1, signed: false }, { name: "has_redirect_node", size: 1, signed: false }, { name: "unused", size: 3, signed: false }] }>, redirectNode: { "1": VarInt; _: Void } /* .get(flags/has_redirect_node) */ }[],
	rootIndex: VarInt,
}


interface packet_declare_recipes {
	recipes: { data: { "crafting_shaped": { group: String_, height: VarInt, ingredients: Arr<{ referencedLength: "width", elementType: Arr<{ referencedLength: "height", elementType: Slot[] }> }>, result: Slot, width: VarInt } ;"crafting_shapeless": { group: String_, ingredients: Slot[][], result: Slot } ;"crafting_special_armordye": Void ;"crafting_special_banneraddpattern": Void ;"crafting_special_bannerduplicate": Void ;"crafting_special_bookcloning": Void ;"crafting_special_firework_rocket": Void ;"crafting_special_firework_star": Void ;"crafting_special_firework_star_fade": Void ;"crafting_special_mapcloning": Void ;"crafting_special_mapextending": Void ;"crafting_special_repairitem": Void ;"crafting_special_shielddecoration": Void ;"crafting_special_shulkerboxcoloring": Void ;"crafting_special_tippedarrow": Void; _: Void } /* .get(type) */, recipeId: String_, type: String_ }[],
}


interface packet_difficulty {
	difficulty: u8,
}


interface packet_entity {
	entityId: VarInt,
}


interface packet_entity_destroy {
	entityIds: VarInt[],
}


interface packet_entity_effect {
	entityId: VarInt,
	effectId: i8,
	amplifier: i8,
	duration: VarInt,
	hideParticles: i8,
}


interface packet_entity_equipment {
	entityId: VarInt,
	slot: VarInt,
	item: Slot,
}


interface packet_entity_head_rotation {
	entityId: VarInt,
	headYaw: i8,
}


interface packet_entity_look {
	entityId: VarInt,
	yaw: i8,
	pitch: i8,
	onGround: bool,
}


interface packet_entity_metadata {
	entityId: VarInt,
	metadata: entityMetadata,
}


interface packet_entity_move_look {
	entityId: VarInt,
	dX: i16,
	dY: i16,
	dZ: i16,
	yaw: i8,
	pitch: i8,
	onGround: bool,
}


interface packet_entity_status {
	entityId: i32,
	entityStatus: i8,
}


interface packet_entity_teleport {
	entityId: VarInt,
	x: f64,
	y: f64,
	z: f64,
	yaw: i8,
	pitch: i8,
	onGround: bool,
}


interface packet_entity_update_attributes {
	entityId: VarInt,
	properties: { key: String_, modifiers: { amount: f64, operation: i8, uuid: UUID }[], value: f64 }[i32],
}


interface packet_entity_velocity {
	entityId: VarInt,
	velocityX: i16,
	velocityY: i16,
	velocityZ: i16,
}


interface packet_experience {
	experienceBar: f32,
	level: VarInt,
	totalExperience: VarInt,
}


interface packet_explosion {
	x: f32,
	y: f32,
	z: f32,
	radius: f32,
	affectedBlockOffsets: { x: i8, y: i8, z: i8 }[i32],
	playerMotionX: f32,
	playerMotionY: f32,
	playerMotionZ: f32,
}


interface packet_game_state_change {
	reason: u8,
	gameMode: f32,
}


interface packet_held_item_slot {
	slot: i8,
}


interface packet_keep_alive {
	keepAliveId: i64,
}


interface packet_kick_disconnect {
	reason: String_,
}


interface packet_login {
	entityId: i32,
	gameMode: u8,
	dimension: i32,
	difficulty: u8,
	maxPlayers: u8,
	levelType: String_,
	reducedDebugInfo: bool,
}


interface packet_map {
	itemDamage: VarInt,
	scale: i8,
	trackingPosition: bool,
	icons: { directionAndType: i8, x: i8, z: i8 }[],
	columns: i8,
	rows: { "0": Void; _: i8 } /* .get(columns) */,
	x: { "0": Void; _: i8 } /* .get(columns) */,
	y: { "0": Void; _: i8 } /* .get(columns) */,
	data: { "0": Void; _: Buffer<{ countType: VarInt }> } /* .get(columns) */,
}


interface packet_map_chunk {
	x: i32,
	z: i32,
	groundUp: bool,
	bitMap: VarInt,
	chunkData: Buffer<{ countType: VarInt }>,
	blockEntities: Nbt[],
}


interface packet_multi_block_change {
	chunkX: i32,
	chunkZ: i32,
	records: { blockId: VarInt, horizontalPos: u8, y: u8 }[],
}


interface packet_named_entity_spawn {
	entityId: VarInt,
	playerUUID: UUID,
	x: f64,
	y: f64,
	z: f64,
	yaw: i8,
	pitch: i8,
	metadata: entityMetadata,
}


interface packet_named_sound_effect {
	soundName: String_,
	soundCategory: VarInt,
	x: i32,
	y: i32,
	z: i32,
	volume: f32,
	pitch: f32,
}


interface packet_open_sign_entity {
	location: position,
}


interface packet_open_window {
	windowId: u8,
	inventoryType: String_,
	windowTitle: String_,
	slotCount: u8,
	entityId: { "EntityHorse": i32; _: Void } /* .get(inventoryType) */,
}


interface packet_player_info {
	action: VarInt,
	data: { UUID: UUID, displayName: { "0": option<String_> ;"3": option<String_>; _: Void } /* .get(../action) */, gamemode: { "0": VarInt ;"1": VarInt; _: Void } /* .get(../action) */, name: { "0": String_; _: Void } /* .get(../action) */, ping: { "0": VarInt ;"2": VarInt; _: Void } /* .get(../action) */, properties: { "0": { name: String_, signature: option<String_>, value: String_ }[]; _: Void } /* .get(../action) */ }[],
}


interface packet_playerlist_header {
	header: String_,
	footer: String_,
}


interface packet_position {
	x: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
	flags: i8,
	teleportId: VarInt,
}


interface packet_rel_entity_move {
	entityId: VarInt,
	dX: i16,
	dY: i16,
	dZ: i16,
	onGround: bool,
}


interface packet_remove_entity_effect {
	entityId: VarInt,
	effectId: i8,
}


interface packet_resource_pack_send {
	url: String_,
	hash: String_,
}


interface packet_respawn {
	dimension: i32,
	difficulty: u8,
	gamemode: u8,
	levelType: String_,
}


interface packet_scoreboard_display_objective {
	position: i8,
	name: String_,
}


interface packet_scoreboard_objective {
	name: String_,
	action: i8,
	displayText: { "0": String_ ;"2": String_; _: Void } /* .get(action) */,
	type: { "0": String_ ;"2": String_; _: Void } /* .get(action) */,
}


interface packet_scoreboard_score {
	itemName: String_,
	action: VarInt,
	scoreName: String_,
	value: { "1": Void; _: VarInt } /* .get(action) */,
}


interface packet_select_advancement_tab {
	id: option<String_>,
}


interface packet_set_cooldown {
	itemID: VarInt,
	cooldownTicks: VarInt,
}


interface packet_set_passengers {
	entityId: VarInt,
	passengers: VarInt[],
}


interface packet_set_slot {
	windowId: i8,
	slot: i16,
	item: Slot,
}


interface packet_sound_effect {
	soundId: VarInt,
	soundCategory: VarInt,
	x: i32,
	y: i32,
	z: i32,
	volume: f32,
	pitch: f32,
}


interface packet_spawn_entity {
	entityId: VarInt,
	objectUUID: UUID,
	type: i8,
	x: f64,
	y: f64,
	z: f64,
	pitch: i8,
	yaw: i8,
	objectData: i32,
	velocityX: i16,
	velocityY: i16,
	velocityZ: i16,
}


interface packet_spawn_entity_experience_orb {
	entityId: VarInt,
	x: f64,
	y: f64,
	z: f64,
	count: i16,
}


interface packet_spawn_entity_living {
	entityId: VarInt,
	entityUUID: UUID,
	type: VarInt,
	x: f64,
	y: f64,
	z: f64,
	yaw: i8,
	pitch: i8,
	headPitch: i8,
	velocityX: i16,
	velocityY: i16,
	velocityZ: i16,
	metadata: entityMetadata,
}


interface packet_spawn_entity_painting {
	entityId: VarInt,
	entityUUID: UUID,
	title: String_,
	location: position,
	direction: u8,
}


interface packet_spawn_entity_weather {
	entityId: VarInt,
	type: i8,
	x: f64,
	y: f64,
	z: f64,
}


interface packet_spawn_position {
	location: position,
}


interface packet_statistics {
	entries: { unknown1: VarInt, unknown2: VarInt, value: VarInt }[],
}


interface packet_stop_sound {
	flags: i8,
	source: { "1": VarInt ;"3": VarInt; _: Void } /* .get(flags) */,
	sound: { "2": String_ ;"3": String_; _: Void } /* .get(flags) */,
}


interface packet_tab_complete {
	transactionId: VarInt,
	start: VarInt,
	length: VarInt,
	matches: String_[],
}


interface packet_tags {
	blockTags: tags,
	itemTags: tags,
}


interface packet_teams {
	team: String_,
	mode: i8,
	name: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	prefix: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	suffix: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	friendlyFire: { "0": i8 ;"2": i8; _: Void } /* .get(mode) */,
	nameTagVisibility: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	collisionRule: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	color: { "0": i8 ;"2": i8; _: Void } /* .get(mode) */,
	players: { "0": String_[] ;"3": String_[] ;"4": String_[]; _: Void } /* .get(mode) */,
}


interface packet_tile_entity_data {
	location: position,
	action: u8,
	nbtData: OptionalNbt,
}


interface packet_title {
	action: VarInt,
	text: { "0": String_ ;"1": String_ ;"2": String_; _: Void } /* .get(action) */,
	fadeIn: { "3": i32; _: Void } /* .get(action) */,
	stay: { "3": i32; _: Void } /* .get(action) */,
	fadeOut: { "3": i32; _: Void } /* .get(action) */,
}


interface packet_transaction {
	windowId: i8,
	action: i16,
	accepted: bool,
}


interface packet_unload_chunk {
	chunkX: i32,
	chunkZ: i32,
}


interface packet_unlock_recipes {
	action: VarInt,
	craftingBookOpen: bool,
	filteringCraftable: bool,
	recipes1: String_[],
	recipes2: { "0": String_[]; _: Void } /* .get(action) */,
}


interface packet_update_health {
	health: f32,
	food: VarInt,
	foodSaturation: f32,
}


interface packet_update_time {
	age: i64,
	time: i64,
}


interface packet_vehicle_move {
	x: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
}


interface packet_window_items {
	windowId: u8,
	items: Slot[i16],
}


interface packet_world_border {
	action: VarInt,
	radius: { "0": f64; _: Void } /* .get(action) */,
	x: { "2": f64 ;"3": f64; _: Void } /* .get(action) */,
	z: { "2": f64 ;"3": f64; _: Void } /* .get(action) */,
	old_radius: { "1": f64 ;"3": f64; _: Void } /* .get(action) */,
	new_radius: { "1": f64 ;"3": f64; _: Void } /* .get(action) */,
	speed: { "1": varlong ;"3": varlong; _: Void } /* .get(action) */,
	portalBoundary: { "3": VarInt; _: Void } /* .get(action) */,
	warning_time: { "3": VarInt ;"4": VarInt; _: Void } /* .get(action) */,
	warning_blocks: { "3": VarInt ;"5": VarInt; _: Void } /* .get(action) */,
}


interface packet_world_event {
	effectId: i32,
	location: position,
	data: i32,
	global: bool,
}


interface packet_world_particles {
	particleId: i32,
	longDistance: bool,
	x: f32,
	y: f32,
	z: f32,
	offsetX: f32,
	offsetY: f32,
	offsetZ: f32,
	particleData: f32,
	particles: i32,
	data: { "36": Slot ;"37": VarInt ;"38": VarInt ;"46": VarInt; _: Void } /* .get(particleId) */,
}

type tags = { entries: VarInt[], tagName: String_ }[];
}
namespace play.to_server {

interface packet {
	name: { 0x00: "teleport_confirm"; 0x01: "chat"; 0x02: "client_command"; 0x03: "settings"; 0x04: "tab_complete"; 0x05: "transaction"; 0x06: "enchant_item"; 0x07: "window_click"; 0x08: "close_window"; 0x09: "custom_payload"; 0x0a: "use_entity"; 0x0b: "keep_alive"; 0x0c: "flying"; 0x0d: "position"; 0x0e: "position_look"; 0x0f: "look"; 0x10: "vehicle_move"; 0x11: "steer_boat"; 0x12: "craft_recipe_request"; 0x13: "abilities"; 0x14: "block_dig"; 0x15: "entity_action"; 0x16: "steer_vehicle"; 0x17: "crafting_book_data"; 0x18: "resource_pack_receive"; 0x19: "advancement_tab"; 0x1a: "held_item_slot"; 0x1b: "set_creative_slot"; 0x1c: "update_sign"; 0x1d: "arm_animation"; 0x1e: "spectate"; 0x1f: "block_place"; 0x20: "use_item"; _ : Void; }[] /* mapper */,
	params: { "abilities": packet_abilities ;"advancement_tab": packet_advancement_tab ;"arm_animation": packet_arm_animation ;"block_dig": packet_block_dig ;"block_place": packet_block_place ;"chat": packet_chat ;"client_command": packet_client_command ;"close_window": packet_close_window ;"craft_recipe_request": packet_craft_recipe_request ;"crafting_book_data": packet_crafting_book_data ;"custom_payload": packet_custom_payload ;"enchant_item": packet_enchant_item ;"entity_action": packet_entity_action ;"flying": packet_flying ;"held_item_slot": packet_held_item_slot ;"keep_alive": packet_keep_alive ;"look": packet_look ;"position": packet_position ;"position_look": packet_position_look ;"resource_pack_receive": packet_resource_pack_receive ;"set_creative_slot": packet_set_creative_slot ;"settings": packet_settings ;"spectate": packet_spectate ;"steer_boat": packet_steer_boat ;"steer_vehicle": packet_steer_vehicle ;"tab_complete": packet_tab_complete ;"teleport_confirm": packet_teleport_confirm ;"transaction": packet_transaction ;"update_sign": packet_update_sign ;"use_entity": packet_use_entity ;"use_item": packet_use_item ;"vehicle_move": packet_vehicle_move ;"window_click": packet_window_click; _: Void } /* .get(name) */,
}


interface packet_abilities {
	flags: i8,
	flyingSpeed: f32,
	walkingSpeed: f32,
}


interface packet_advancement_tab {
	action: VarInt,
	tabId: { "0": String_ ;"1": Void; _: Void } /* .get(action) */,
}


interface packet_arm_animation {
	hand: VarInt,
}


interface packet_block_dig {
	status: VarInt,
	location: position,
	face: i8,
}


interface packet_block_place {
	location: position,
	direction: VarInt,
	hand: VarInt,
	cursorX: f32,
	cursorY: f32,
	cursorZ: f32,
}


interface packet_chat {
	message: String_,
}


interface packet_client_command {
	actionId: VarInt,
}


interface packet_close_window {
	windowId: u8,
}


interface packet_craft_recipe_request {
	windowId: i8,
	recipe: String_,
	makeAll: bool,
}


interface packet_crafting_book_data {
	type: VarInt,
	_anon_2: { "0": { displayedRecipe: i32 } ;"1": { craftingBookOpen: bool, craftingFilter: bool }; _: Void } /* .get(type) */
}


interface packet_custom_payload {
	channel: String_,
	data: RestBuffer,
}


interface packet_enchant_item {
	windowId: i8,
	enchantment: i8,
}


interface packet_entity_action {
	entityId: VarInt,
	actionId: VarInt,
	jumpBoost: VarInt,
}


interface packet_flying {
	onGround: bool,
}


interface packet_held_item_slot {
	slotId: i16,
}


interface packet_keep_alive {
	keepAliveId: i64,
}


interface packet_look {
	yaw: f32,
	pitch: f32,
	onGround: bool,
}


interface packet_position {
	x: f64,
	y: f64,
	z: f64,
	onGround: bool,
}


interface packet_position_look {
	x: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
	onGround: bool,
}


interface packet_resource_pack_receive {
	result: VarInt,
}


interface packet_set_creative_slot {
	slot: i16,
	item: Slot,
}


interface packet_settings {
	locale: String_,
	viewDistance: i8,
	chatFlags: VarInt,
	chatColors: bool,
	skinParts: u8,
	mainHand: VarInt,
}


interface packet_spectate {
	target: UUID,
}


interface packet_steer_boat {
	leftPaddle: bool,
	rightPaddle: bool,
}


interface packet_steer_vehicle {
	sideways: f32,
	forward: f32,
	jump: u8,
}


interface packet_tab_complete {
	transactionId: VarInt,
	text: String_,
}


interface packet_teleport_confirm {
	teleportId: VarInt,
}


interface packet_transaction {
	windowId: i8,
	action: i16,
	accepted: bool,
}


interface packet_update_sign {
	location: position,
	text1: String_,
	text2: String_,
	text3: String_,
	text4: String_,
}


interface packet_use_entity {
	target: VarInt,
	mouse: VarInt,
	x: { "2": f32; _: Void } /* .get(mouse) */,
	y: { "2": f32; _: Void } /* .get(mouse) */,
	z: { "2": f32; _: Void } /* .get(mouse) */,
	hand: { "0": VarInt ;"2": VarInt; _: Void } /* .get(mouse) */,
}


interface packet_use_item {
	hand: VarInt,
}


interface packet_vehicle_move {
	x: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
}


interface packet_window_click {
	windowId: u8,
	slot: i16,
	mouseButton: i8,
	action: i16,
	mode: i8,
	item: Slot,
}

}
