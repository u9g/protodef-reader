---
source: src/main.rs
expression: "format!(\"{:?}\", p)"
input_file: src/inputs/1_12_2_protocol.json
snapshot_kind: text
---
Protocol { types: {"f64": NativeType, "i32": NativeType, "u8": NativeType, "varint": NativeType, "optionalNbt": NativeType, "i64": NativeType, "container": NativeType, "entityMetadata": EntityMetadataLoop { ty: EntityMetadataLoopType { end_val: 255, ty: Container { ty: ContainerType { fields: [Anonymous(AnonymousType { ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "key", ty: U8 }), Named(TypeWithName { name: "type", ty: I8 })] } }, anon: true }), Named(TypeWithName { name: "value", ty: EntityMetadataItem { ty: EntityMetadataItemType { compare_to: "type" } } })] } } } }, "void": NativeType, "i16": NativeType, "position": BitField { fields: [BitFieldType { name: "x", size: 26, signed: true }, BitFieldType { name: "y", size: 12, signed: true }, BitFieldType { name: "z", size: 26, signed: true }] }, "UUID": NativeType, "buffer": NativeType, "switch": NativeType, "array": NativeType, "nbt": NativeType, "slot": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "blockId", ty: I16 }), Anonymous(AnonymousType { ty: Switch { switch: SwitchType { compare_to: "blockId", fields: {"-1": Void}, default: Some(Container { ty: ContainerType { fields: [Named(TypeWithName { name: "itemCount", ty: I8 }), Named(TypeWithName { name: "itemDamage", ty: I16 }), Named(TypeWithName { name: "nbtData", ty: OptionalNbt })] } }) } }, anon: true })] } }, "i8": NativeType, "entityMetadataLoop": NativeType, "string": PString { count_type: VarInt }, "entityMetadataItem": Switch { switch: SwitchType { compare_to: "$compareTo", fields: {"0": I8, "2": F32, "4": String, "1": VarInt, "5": Slot, "6": Bool, "13": Nbt, "7": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "pitch", ty: F32 }), Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "roll", ty: F32 })] } }, "10": VarInt, "8": Position, "11": Option { ty: UUID }, "9": Option { ty: Position }, "12": VarInt, "3": String}, default: None } }, "pstring": NativeType, "u16": NativeType, "varlong": NativeType, "option": NativeType, "restBuffer": NativeType, "f32": NativeType, "bool": NativeType, "bitfield": NativeType}, handshaking: BiDirectionalPackets { to_client: TypeHolder { types: {"packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {}, default: None } } })] } }} }, to_server: TypeHolder { types: {"packet_set_protocol": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "protocolVersion", ty: VarInt }), Named(TypeWithName { name: "serverHost", ty: String }), Named(TypeWithName { name: "serverPort", ty: U16 }), Named(TypeWithName { name: "nextState", ty: VarInt })] } }, "packet_legacy_server_list_ping": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "payload", ty: U8 })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0xfe": "legacy_server_list_ping", "0x00": "set_protocol"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"legacy_server_list_ping": NonNativeType("packet_legacy_server_list_ping"), "set_protocol": NonNativeType("packet_set_protocol")}, default: None } } })] } }} } }, status: BiDirectionalPackets { to_client: TypeHolder { types: {"packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x00": "server_info", "0x01": "ping"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"server_info": NonNativeType("packet_server_info"), "ping": NonNativeType("packet_ping")}, default: None } } })] } }, "packet_ping": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "time", ty: I64 })] } }, "packet_server_info": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "response", ty: String })] } }} }, to_server: TypeHolder { types: {"packet_ping": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "time", ty: I64 })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x01": "ping", "0x00": "ping_start"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"ping": NonNativeType("packet_ping"), "ping_start": NonNativeType("packet_ping_start")}, default: None } } })] } }, "packet_ping_start": Container { ty: ContainerType { fields: [] } }} } }, login: BiDirectionalPackets { to_client: TypeHolder { types: {"packet_disconnect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "reason", ty: String })] } }, "packet_success": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "uuid", ty: String }), Named(TypeWithName { name: "username", ty: String })] } }, "packet_encryption_begin": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "serverId", ty: String }), Named(TypeWithName { name: "publicKey", ty: Buffer { ty: Typed { count_type: VarInt } } }), Named(TypeWithName { name: "verifyToken", ty: Buffer { ty: Typed { count_type: VarInt } } })] } }, "packet_compress": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "threshold", ty: VarInt })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x02": "success", "0x01": "encryption_begin", "0x03": "compress", "0x00": "disconnect"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"compress": NonNativeType("packet_compress"), "disconnect": NonNativeType("packet_disconnect"), "encryption_begin": NonNativeType("packet_encryption_begin"), "success": NonNativeType("packet_success")}, default: None } } })] } }} }, to_server: TypeHolder { types: {"packet_encryption_begin": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "sharedSecret", ty: Buffer { ty: Typed { count_type: VarInt } } }), Named(TypeWithName { name: "verifyToken", ty: Buffer { ty: Typed { count_type: VarInt } } })] } }, "packet_login_start": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "username", ty: String })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x00": "login_start", "0x01": "encryption_begin"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"login_start": NonNativeType("packet_login_start"), "encryption_begin": NonNativeType("packet_encryption_begin")}, default: None } } })] } }} } }, configuration: None, play: BiDirectionalPackets { to_client: TypeHolder { types: {"packet_spawn_position": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position })] } }, "packet_camera": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "cameraId", ty: VarInt })] } }, "packet_world_border": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "radius", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": F64}, default: Some(Void) } } }), Named(TypeWithName { name: "x", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": F64, "2": F64}, default: Some(Void) } } }), Named(TypeWithName { name: "z", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": F64, "2": F64}, default: Some(Void) } } }), Named(TypeWithName { name: "old_radius", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"1": F64, "3": F64}, default: Some(Void) } } }), Named(TypeWithName { name: "new_radius", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"1": F64, "3": F64}, default: Some(Void) } } }), Named(TypeWithName { name: "speed", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"1": VarLong, "3": VarLong}, default: Some(Void) } } }), Named(TypeWithName { name: "portalBoundary", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "warning_time", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": VarInt, "4": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "warning_blocks", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": VarInt, "5": VarInt}, default: Some(Void) } } })] } }, "packet_tab_complete": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "matches", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) } })] } }, "packet_entity_status": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: I32 }), Named(TypeWithName { name: "entityStatus", ty: I8 })] } }, "packet_explosion": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F32 }), Named(TypeWithName { name: "y", ty: F32 }), Named(TypeWithName { name: "z", ty: F32 }), Named(TypeWithName { name: "radius", ty: F32 }), Named(TypeWithName { name: "affectedBlockOffsets", ty: Array { ty: VariableSize(VariableArrayType { count_type: I32, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: I8 }), Named(TypeWithName { name: "y", ty: I8 }), Named(TypeWithName { name: "z", ty: I8 })] } } }) } }), Named(TypeWithName { name: "playerMotionX", ty: F32 }), Named(TypeWithName { name: "playerMotionY", ty: F32 }), Named(TypeWithName { name: "playerMotionZ", ty: F32 })] } }, "packet_named_sound_effect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "soundName", ty: String }), Named(TypeWithName { name: "soundCategory", ty: VarInt }), Named(TypeWithName { name: "x", ty: I32 }), Named(TypeWithName { name: "y", ty: I32 }), Named(TypeWithName { name: "z", ty: I32 }), Named(TypeWithName { name: "volume", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 })] } }, "packet_block_change": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "type", ty: VarInt })] } }, "packet_spawn_entity_weather": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "type", ty: I8 }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 })] } }, "packet_remove_entity_effect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "effectId", ty: I8 })] } }, "packet_boss_bar": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityUUID", ty: UUID }), Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "title", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": String, "3": String}, default: Some(Void) } } }), Named(TypeWithName { name: "health", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"2": F32, "0": F32}, default: Some(Void) } } }), Named(TypeWithName { name: "color", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": VarInt, "4": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "dividers", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": VarInt, "4": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "flags", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"5": U8, "0": U8}, default: Some(Void) } } })] } }, "packet_position": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 }), Named(TypeWithName { name: "flags", ty: I8 }), Named(TypeWithName { name: "teleportId", ty: VarInt })] } }, "packet_respawn": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "dimension", ty: I32 }), Named(TypeWithName { name: "difficulty", ty: U8 }), Named(TypeWithName { name: "gamemode", ty: U8 }), Named(TypeWithName { name: "levelType", ty: String })] } }, "packet_game_state_change": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "reason", ty: U8 }), Named(TypeWithName { name: "gameMode", ty: F32 })] } }, "packet_craft_recipe_response": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "recipe", ty: VarInt })] } }, "packet_abilities": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "flags", ty: I8 }), Named(TypeWithName { name: "flyingSpeed", ty: F32 }), Named(TypeWithName { name: "walkingSpeed", ty: F32 })] } }, "packet_entity_head_rotation": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "headYaw", ty: I8 })] } }, "packet_held_item_slot": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "slot", ty: I8 })] } }, "packet_entity_metadata": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "metadata", ty: EntityMetadata })] } }, "packet_update_time": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "age", ty: I64 }), Named(TypeWithName { name: "time", ty: I64 })] } }, "packet_collect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "collectedEntityId", ty: VarInt }), Named(TypeWithName { name: "collectorEntityId", ty: VarInt }), Named(TypeWithName { name: "pickupItemCount", ty: VarInt })] } }, "packet_entity_effect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "effectId", ty: I8 }), Named(TypeWithName { name: "amplifier", ty: I8 }), Named(TypeWithName { name: "duration", ty: VarInt }), Named(TypeWithName { name: "hideParticles", ty: I8 })] } }, "packet_map_chunk": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: I32 }), Named(TypeWithName { name: "z", ty: I32 }), Named(TypeWithName { name: "groundUp", ty: Bool }), Named(TypeWithName { name: "bitMap", ty: VarInt }), Named(TypeWithName { name: "chunkData", ty: Buffer { ty: Typed { count_type: VarInt } } }), Named(TypeWithName { name: "blockEntities", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Nbt }) } })] } }, "packet_block_action": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "byte1", ty: U8 }), Named(TypeWithName { name: "byte2", ty: U8 }), Named(TypeWithName { name: "blockId", ty: VarInt })] } }, "packet_entity_move_look": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "dX", ty: I16 }), Named(TypeWithName { name: "dY", ty: I16 }), Named(TypeWithName { name: "dZ", ty: I16 }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_window_items": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 }), Named(TypeWithName { name: "items", ty: Array { ty: VariableSize(VariableArrayType { count_type: I16, ty: Slot }) } })] } }, "packet_attach_entity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: I32 }), Named(TypeWithName { name: "vehicleId", ty: I32 })] } }, "packet_player_info": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "data", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "UUID", ty: UUID }), Named(TypeWithName { name: "name", ty: Switch { switch: SwitchType { compare_to: "../action", fields: {"0": String}, default: Some(Void) } } }), Named(TypeWithName { name: "properties", ty: Switch { switch: SwitchType { compare_to: "../action", fields: {"0": Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: String }), Named(TypeWithName { name: "value", ty: String }), Named(TypeWithName { name: "signature", ty: Option { ty: String } })] } } }) }}, default: Some(Void) } } }), Named(TypeWithName { name: "gamemode", ty: Switch { switch: SwitchType { compare_to: "../action", fields: {"0": VarInt, "1": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "ping", ty: Switch { switch: SwitchType { compare_to: "../action", fields: {"0": VarInt, "2": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "displayName", ty: Switch { switch: SwitchType { compare_to: "../action", fields: {"3": Option { ty: String }, "0": Option { ty: String }}, default: Some(Void) } } })] } } }) } })] } }, "packet_scoreboard_display_objective": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "position", ty: I8 }), Named(TypeWithName { name: "name", ty: String })] } }, "packet_entity_destroy": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityIds", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: VarInt }) } })] } }, "packet_animation": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "animation", ty: U8 })] } }, "packet_keep_alive": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "keepAliveId", ty: I64 })] } }, "packet_teams": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "team", ty: String }), Named(TypeWithName { name: "mode", ty: I8 }), Named(TypeWithName { name: "name", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"2": String, "0": String}, default: Some(Void) } } }), Named(TypeWithName { name: "prefix", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"2": String, "0": String}, default: Some(Void) } } }), Named(TypeWithName { name: "suffix", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"0": String, "2": String}, default: Some(Void) } } }), Named(TypeWithName { name: "friendlyFire", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"2": I8, "0": I8}, default: Some(Void) } } }), Named(TypeWithName { name: "nameTagVisibility", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"2": String, "0": String}, default: Some(Void) } } }), Named(TypeWithName { name: "collisionRule", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"0": String, "2": String}, default: Some(Void) } } }), Named(TypeWithName { name: "color", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"2": I8, "0": I8}, default: Some(Void) } } }), Named(TypeWithName { name: "players", ty: Switch { switch: SwitchType { compare_to: "mode", fields: {"3": Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) }, "4": Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) }, "0": Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) }}, default: Some(Void) } } })] } }, "packet_transaction": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "action", ty: I16 }), Named(TypeWithName { name: "accepted", ty: Bool })] } }, "packet_world_particles": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "particleId", ty: I32 }), Named(TypeWithName { name: "longDistance", ty: Bool }), Named(TypeWithName { name: "x", ty: F32 }), Named(TypeWithName { name: "y", ty: F32 }), Named(TypeWithName { name: "z", ty: F32 }), Named(TypeWithName { name: "offsetX", ty: F32 }), Named(TypeWithName { name: "offsetY", ty: F32 }), Named(TypeWithName { name: "offsetZ", ty: F32 }), Named(TypeWithName { name: "particleData", ty: F32 }), Named(TypeWithName { name: "particles", ty: I32 }), Named(TypeWithName { name: "data", ty: Switch { switch: SwitchType { compare_to: "particleId", fields: {"38": Array { ty: FixedSize(FixedArrayType { count: 1, ty: VarInt }) }, "37": Array { ty: FixedSize(FixedArrayType { count: 1, ty: VarInt }) }, "36": Array { ty: FixedSize(FixedArrayType { count: 2, ty: VarInt }) }}, default: Some(Void) } } })] } }, "packet_entity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt })] } }, "packet_open_sign_entity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position })] } }, "packet_set_passengers": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "passengers", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: VarInt }) } })] } }, "packet_vehicle_move": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 })] } }, "packet_unload_chunk": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "chunkX", ty: I32 }), Named(TypeWithName { name: "chunkZ", ty: I32 })] } }, "packet_entity_velocity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "velocityX", ty: I16 }), Named(TypeWithName { name: "velocityY", ty: I16 }), Named(TypeWithName { name: "velocityZ", ty: I16 })] } }, "packet_resource_pack_send": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "url", ty: String }), Named(TypeWithName { name: "hash", ty: String })] } }, "packet_playerlist_header": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "header", ty: String }), Named(TypeWithName { name: "footer", ty: String })] } }, "packet_named_entity_spawn": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "playerUUID", ty: UUID }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "metadata", ty: EntityMetadata })] } }, "packet_kick_disconnect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "reason", ty: String })] } }, "packet_multi_block_change": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "chunkX", ty: I32 }), Named(TypeWithName { name: "chunkZ", ty: I32 }), Named(TypeWithName { name: "records", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "horizontalPos", ty: U8 }), Named(TypeWithName { name: "y", ty: U8 }), Named(TypeWithName { name: "blockId", ty: VarInt })] } } }) } })] } }, "packet_spawn_entity_living": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "entityUUID", ty: UUID }), Named(TypeWithName { name: "type", ty: VarInt }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "headPitch", ty: I8 }), Named(TypeWithName { name: "velocityX", ty: I16 }), Named(TypeWithName { name: "velocityY", ty: I16 }), Named(TypeWithName { name: "velocityZ", ty: I16 }), Named(TypeWithName { name: "metadata", ty: EntityMetadata })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x05": "named_entity_spawn", "0x3e": "entity_velocity", "0x15": "craft_progress_bar", "0x34": "resource_pack_send", "0x0c": "boss_bar", "0x4a": "playerlist_header", "0x04": "spawn_entity_painting", "0x20": "map_chunk", "0x49": "sound_effect", "0x30": "bed", "0x45": "scoreboard_score", "0x4b": "collect", "0x3c": "entity_metadata", "0x31": "unlock_recipes", "0x4e": "entity_update_attributes", "0x02": "spawn_entity_weather", "0x1f": "keep_alive", "0x22": "world_particles", "0x33": "remove_entity_effect", "0x14": "window_items", "0x1c": "explosion", "0x25": "entity", "0x27": "entity_move_look", "0x1b": "entity_status", "0x0e": "tab_complete", "0x35": "respawn", "0x00": "spawn_entity", "0x48": "title", "0x4c": "entity_teleport", "0x06": "animation", "0x08": "block_break_animation", "0x17": "set_cooldown", "0x1e": "game_state_change", "0x01": "spawn_entity_experience_orb", "0x24": "map", "0x11": "transaction", "0x2c": "abilities", "0x29": "vehicle_move", "0x2d": "combat_event", "0x38": "world_border", "0x37": "select_advancement_tab", "0x2b": "craft_recipe_response", "0x0b": "block_change", "0x3d": "attach_entity", "0x1a": "kick_disconnect", "0x40": "experience", "0x13": "open_window", "0x2f": "position", "0x0d": "difficulty", "0x18": "custom_payload", "0x0f": "chat", "0x3a": "held_item_slot", "0x3b": "scoreboard_display_objective", "0x43": "set_passengers", "0x09": "tile_entity_data", "0x26": "rel_entity_move", "0x16": "set_slot", "0x28": "entity_look", "0x2e": "player_info", "0x32": "entity_destroy", "0x36": "entity_head_rotation", "0x46": "spawn_position", "0x47": "update_time", "0x2a": "open_sign_entity", "0x07": "statistics", "0x39": "camera", "0x23": "login", "0x4f": "entity_effect", "0x3f": "entity_equipment", "0x12": "close_window", "0x03": "spawn_entity_living", "0x1d": "unload_chunk", "0x21": "world_event", "0x10": "multi_block_change", "0x19": "named_sound_effect", "0x42": "scoreboard_objective", "0x44": "teams", "0x41": "update_health", "0x0a": "block_action", "0x4d": "advancements"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"craft_progress_bar": NonNativeType("packet_craft_progress_bar"), "update_health": NonNativeType("packet_update_health"), "entity_head_rotation": NonNativeType("packet_entity_head_rotation"), "tab_complete": NonNativeType("packet_tab_complete"), "set_cooldown": NonNativeType("packet_set_cooldown"), "transaction": NonNativeType("packet_transaction"), "spawn_entity": NonNativeType("packet_spawn_entity"), "tile_entity_data": NonNativeType("packet_tile_entity_data"), "update_time": NonNativeType("packet_update_time"), "game_state_change": NonNativeType("packet_game_state_change"), "spawn_entity_living": NonNativeType("packet_spawn_entity_living"), "spawn_entity_painting": NonNativeType("packet_spawn_entity_painting"), "advancements": NonNativeType("packet_advancements"), "login": NonNativeType("packet_login"), "explosion": NonNativeType("packet_explosion"), "craft_recipe_response": NonNativeType("packet_craft_recipe_response"), "entity_velocity": NonNativeType("packet_entity_velocity"), "teams": NonNativeType("packet_teams"), "chat": NonNativeType("packet_chat"), "scoreboard_score": NonNativeType("packet_scoreboard_score"), "window_items": NonNativeType("packet_window_items"), "bed": NonNativeType("packet_bed"), "difficulty": NonNativeType("packet_difficulty"), "map": NonNativeType("packet_map"), "rel_entity_move": NonNativeType("packet_rel_entity_move"), "close_window": NonNativeType("packet_close_window"), "collect": NonNativeType("packet_collect"), "entity_status": NonNativeType("packet_entity_status"), "block_action": NonNativeType("packet_block_action"), "entity_metadata": NonNativeType("packet_entity_metadata"), "scoreboard_objective": NonNativeType("packet_scoreboard_objective"), "animation": NonNativeType("packet_animation"), "named_sound_effect": NonNativeType("packet_named_sound_effect"), "abilities": NonNativeType("packet_abilities"), "set_slot": NonNativeType("packet_set_slot"), "playerlist_header": NonNativeType("packet_playerlist_header"), "statistics": NonNativeType("packet_statistics"), "block_change": NonNativeType("packet_block_change"), "resource_pack_send": NonNativeType("packet_resource_pack_send"), "respawn": NonNativeType("packet_respawn"), "world_particles": NonNativeType("packet_world_particles"), "scoreboard_display_objective": NonNativeType("packet_scoreboard_display_objective"), "title": NonNativeType("packet_title"), "map_chunk": NonNativeType("packet_map_chunk"), "entity_teleport": NonNativeType("packet_entity_teleport"), "attach_entity": NonNativeType("packet_attach_entity"), "keep_alive": NonNativeType("packet_keep_alive"), "custom_payload": NonNativeType("packet_custom_payload"), "open_sign_entity": NonNativeType("packet_open_sign_entity"), "set_passengers": NonNativeType("packet_set_passengers"), "entity_move_look": NonNativeType("packet_entity_move_look"), "world_border": NonNativeType("packet_world_border"), "spawn_position": NonNativeType("packet_spawn_position"), "remove_entity_effect": NonNativeType("packet_remove_entity_effect"), "open_window": NonNativeType("packet_open_window"), "position": NonNativeType("packet_position"), "unload_chunk": NonNativeType("packet_unload_chunk"), "spawn_entity_weather": NonNativeType("packet_spawn_entity_weather"), "entity_effect": NonNativeType("packet_entity_effect"), "multi_block_change": NonNativeType("packet_multi_block_change"), "entity": NonNativeType("packet_entity"), "entity_update_attributes": NonNativeType("packet_entity_update_attributes"), "sound_effect": NonNativeType("packet_sound_effect"), "world_event": NonNativeType("packet_world_event"), "block_break_animation": NonNativeType("packet_block_break_animation"), "held_item_slot": NonNativeType("packet_held_item_slot"), "player_info": NonNativeType("packet_player_info"), "boss_bar": NonNativeType("packet_boss_bar"), "vehicle_move": NonNativeType("packet_vehicle_move"), "entity_destroy": NonNativeType("packet_entity_destroy"), "combat_event": NonNativeType("packet_combat_event"), "entity_equipment": NonNativeType("packet_entity_equipment"), "spawn_entity_experience_orb": NonNativeType("packet_spawn_entity_experience_orb"), "experience": NonNativeType("packet_experience"), "camera": NonNativeType("packet_camera"), "select_advancement_tab": NonNativeType("packet_select_advancement_tab"), "kick_disconnect": NonNativeType("packet_kick_disconnect"), "entity_look": NonNativeType("packet_entity_look"), "named_entity_spawn": NonNativeType("packet_named_entity_spawn"), "unlock_recipes": NonNativeType("packet_unlock_recipes")}, default: None } } })] } }, "packet_world_event": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "effectId", ty: I32 }), Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "data", ty: I32 }), Named(TypeWithName { name: "global", ty: Bool })] } }, "packet_statistics": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entries", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: String }), Named(TypeWithName { name: "value", ty: VarInt })] } } }) } })] } }, "packet_block_break_animation": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "destroyStage", ty: I8 })] } }, "packet_craft_progress_bar": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 }), Named(TypeWithName { name: "property", ty: I16 }), Named(TypeWithName { name: "value", ty: I16 })] } }, "packet_experience": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "experienceBar", ty: F32 }), Named(TypeWithName { name: "level", ty: VarInt }), Named(TypeWithName { name: "totalExperience", ty: VarInt })] } }, "packet_select_advancement_tab": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "id", ty: Option { ty: String } })] } }, "packet_advancements": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "reset", ty: Bool }), Named(TypeWithName { name: "advancementMapping", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "key", ty: String }), Named(TypeWithName { name: "value", ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "parentId", ty: Option { ty: String } }), Named(TypeWithName { name: "displayData", ty: Option { ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "title", ty: String }), Named(TypeWithName { name: "description", ty: String }), Named(TypeWithName { name: "icon", ty: Slot }), Named(TypeWithName { name: "frameType", ty: VarInt }), Named(TypeWithName { name: "flags", ty: BitField { fields: [BitFieldType { name: "_unused", size: 29, signed: false }, BitFieldType { name: "hidden", size: 1, signed: false }, BitFieldType { name: "show_toast", size: 1, signed: false }, BitFieldType { name: "has_background_texture", size: 1, signed: false }] } }), Named(TypeWithName { name: "backgroundTexture", ty: Switch { switch: SwitchType { compare_to: "flags/has_background_texture", fields: {"1": String}, default: Some(Void) } } }), Named(TypeWithName { name: "xCord", ty: F32 }), Named(TypeWithName { name: "yCord", ty: F32 })] } } } }), Named(TypeWithName { name: "criteria", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "key", ty: String }), Named(TypeWithName { name: "value", ty: Void })] } } }) } }), Named(TypeWithName { name: "requirements", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) } }) } })] } } })] } } }) } }), Named(TypeWithName { name: "identifiers", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: String }) } }), Named(TypeWithName { name: "progressMapping", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "key", ty: String }), Named(TypeWithName { name: "value", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "criterionIdentifier", ty: String }), Named(TypeWithName { name: "criterionProgress", ty: Option { ty: I64 } })] } } }) } })] } } }) } })] } }, "packet_set_slot": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "slot", ty: I16 }), Named(TypeWithName { name: "item", ty: Slot })] } }, "packet_update_health": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "health", ty: F32 }), Named(TypeWithName { name: "food", ty: VarInt }), Named(TypeWithName { name: "foodSaturation", ty: F32 })] } }, "packet_spawn_entity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "objectUUID", ty: UUID }), Named(TypeWithName { name: "type", ty: I8 }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "objectData", ty: I32 }), Named(TypeWithName { name: "velocityX", ty: I16 }), Named(TypeWithName { name: "velocityY", ty: I16 }), Named(TypeWithName { name: "velocityZ", ty: I16 })] } }, "packet_combat_event": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "event", ty: VarInt }), Named(TypeWithName { name: "duration", ty: Switch { switch: SwitchType { compare_to: "event", fields: {"1": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "playerId", ty: Switch { switch: SwitchType { compare_to: "event", fields: {"2": VarInt}, default: Some(Void) } } }), Named(TypeWithName { name: "entityId", ty: Switch { switch: SwitchType { compare_to: "event", fields: {"2": I32, "1": I32}, default: Some(Void) } } }), Named(TypeWithName { name: "message", ty: Switch { switch: SwitchType { compare_to: "event", fields: {"2": String}, default: Some(Void) } } })] } }, "packet_spawn_entity_experience_orb": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "count", ty: I16 })] } }, "packet_login": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: I32 }), Named(TypeWithName { name: "gameMode", ty: U8 }), Named(TypeWithName { name: "dimension", ty: I32 }), Named(TypeWithName { name: "difficulty", ty: U8 }), Named(TypeWithName { name: "maxPlayers", ty: U8 }), Named(TypeWithName { name: "levelType", ty: String }), Named(TypeWithName { name: "reducedDebugInfo", ty: Bool })] } }, "packet_entity_teleport": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_spawn_entity_painting": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "entityUUID", ty: UUID }), Named(TypeWithName { name: "title", ty: String }), Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "direction", ty: U8 })] } }, "packet_set_cooldown": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "itemID", ty: VarInt }), Named(TypeWithName { name: "cooldownTicks", ty: VarInt })] } }, "packet_difficulty": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "difficulty", ty: U8 })] } }, "packet_entity_equipment": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "slot", ty: VarInt }), Named(TypeWithName { name: "item", ty: Slot })] } }, "packet_custom_payload": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "channel", ty: String }), Named(TypeWithName { name: "data", ty: RestBuffer })] } }, "packet_map": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "itemDamage", ty: VarInt }), Named(TypeWithName { name: "scale", ty: I8 }), Named(TypeWithName { name: "trackingPosition", ty: Bool }), Named(TypeWithName { name: "icons", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "directionAndType", ty: I8 }), Named(TypeWithName { name: "x", ty: I8 }), Named(TypeWithName { name: "z", ty: I8 })] } } }) } }), Named(TypeWithName { name: "columns", ty: I8 }), Named(TypeWithName { name: "rows", ty: Switch { switch: SwitchType { compare_to: "columns", fields: {"0": Void}, default: Some(I8) } } }), Named(TypeWithName { name: "x", ty: Switch { switch: SwitchType { compare_to: "columns", fields: {"0": Void}, default: Some(I8) } } }), Named(TypeWithName { name: "y", ty: Switch { switch: SwitchType { compare_to: "columns", fields: {"0": Void}, default: Some(I8) } } }), Named(TypeWithName { name: "data", ty: Switch { switch: SwitchType { compare_to: "columns", fields: {"0": Void}, default: Some(Buffer { ty: Typed { count_type: VarInt } }) } } })] } }, "packet_bed": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "location", ty: Position })] } }, "packet_scoreboard_score": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "itemName", ty: String }), Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "scoreName", ty: String }), Named(TypeWithName { name: "value", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"1": Void}, default: Some(VarInt) } } })] } }, "packet_entity_look": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "yaw", ty: I8 }), Named(TypeWithName { name: "pitch", ty: I8 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_tile_entity_data": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "action", ty: U8 }), Named(TypeWithName { name: "nbtData", ty: OptionalNbt })] } }, "packet_close_window": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 })] } }, "packet_chat": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "message", ty: String }), Named(TypeWithName { name: "position", ty: I8 })] } }, "packet_sound_effect": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "soundId", ty: VarInt }), Named(TypeWithName { name: "soundCategory", ty: VarInt }), Named(TypeWithName { name: "x", ty: I32 }), Named(TypeWithName { name: "y", ty: I32 }), Named(TypeWithName { name: "z", ty: I32 }), Named(TypeWithName { name: "volume", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 })] } }, "packet_open_window": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 }), Named(TypeWithName { name: "inventoryType", ty: String }), Named(TypeWithName { name: "windowTitle", ty: String }), Named(TypeWithName { name: "slotCount", ty: U8 }), Named(TypeWithName { name: "entityId", ty: Switch { switch: SwitchType { compare_to: "inventoryType", fields: {"EntityHorse": I32}, default: Some(Void) } } })] } }, "packet_title": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "text", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"1": String, "0": String, "2": String}, default: Some(Void) } } }), Named(TypeWithName { name: "fadeIn", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": I32}, default: Some(Void) } } }), Named(TypeWithName { name: "stay", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": I32}, default: Some(Void) } } }), Named(TypeWithName { name: "fadeOut", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"3": I32}, default: Some(Void) } } })] } }, "packet_rel_entity_move": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "dX", ty: I16 }), Named(TypeWithName { name: "dY", ty: I16 }), Named(TypeWithName { name: "dZ", ty: I16 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_scoreboard_objective": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: String }), Named(TypeWithName { name: "action", ty: I8 }), Named(TypeWithName { name: "displayText", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": String, "2": String}, default: Some(Void) } } }), Named(TypeWithName { name: "type", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": String, "2": String}, default: Some(Void) } } })] } }, "packet_entity_update_attributes": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "properties", ty: Array { ty: VariableSize(VariableArrayType { count_type: I32, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "key", ty: String }), Named(TypeWithName { name: "value", ty: F64 }), Named(TypeWithName { name: "modifiers", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: Container { ty: ContainerType { fields: [Named(TypeWithName { name: "uuid", ty: UUID }), Named(TypeWithName { name: "amount", ty: F64 }), Named(TypeWithName { name: "operation", ty: I8 })] } } }) } })] } } }) } })] } }, "packet_unlock_recipes": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "craftingBookOpen", ty: Bool }), Named(TypeWithName { name: "filteringCraftable", ty: Bool }), Named(TypeWithName { name: "recipes1", ty: Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: VarInt }) } }), Named(TypeWithName { name: "recipes2", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": Array { ty: VariableSize(VariableArrayType { count_type: VarInt, ty: VarInt }) }}, default: Some(Void) } } })] } }} }, to_server: TypeHolder { types: {"packet_position": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_close_window": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 })] } }, "packet_arm_animation": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "hand", ty: VarInt })] } }, "packet_craft_recipe_request": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "recipe", ty: VarInt }), Named(TypeWithName { name: "makeAll", ty: Bool })] } }, "packet_enchant_item": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "enchantment", ty: I8 })] } }, "packet_window_click": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: U8 }), Named(TypeWithName { name: "slot", ty: I16 }), Named(TypeWithName { name: "mouseButton", ty: I8 }), Named(TypeWithName { name: "action", ty: I16 }), Named(TypeWithName { name: "mode", ty: I8 }), Named(TypeWithName { name: "item", ty: Slot })] } }, "packet_update_sign": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "text1", ty: String }), Named(TypeWithName { name: "text2", ty: String }), Named(TypeWithName { name: "text3", ty: String }), Named(TypeWithName { name: "text4", ty: String })] } }, "packet_position_look": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_client_command": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "actionId", ty: VarInt })] } }, "packet_block_place": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "direction", ty: VarInt }), Named(TypeWithName { name: "hand", ty: VarInt }), Named(TypeWithName { name: "cursorX", ty: F32 }), Named(TypeWithName { name: "cursorY", ty: F32 }), Named(TypeWithName { name: "cursorZ", ty: F32 })] } }, "packet_settings": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "locale", ty: String }), Named(TypeWithName { name: "viewDistance", ty: I8 }), Named(TypeWithName { name: "chatFlags", ty: VarInt }), Named(TypeWithName { name: "chatColors", ty: Bool }), Named(TypeWithName { name: "skinParts", ty: U8 }), Named(TypeWithName { name: "mainHand", ty: VarInt })] } }, "packet_transaction": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "windowId", ty: I8 }), Named(TypeWithName { name: "action", ty: I16 }), Named(TypeWithName { name: "accepted", ty: Bool })] } }, "packet_keep_alive": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "keepAliveId", ty: I64 })] } }, "packet_teleport_confirm": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "teleportId", ty: VarInt })] } }, "packet_held_item_slot": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "slotId", ty: I16 })] } }, "packet_spectate": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "target", ty: UUID })] } }, "packet_chat": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "message", ty: String })] } }, "packet_vehicle_move": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "x", ty: F64 }), Named(TypeWithName { name: "y", ty: F64 }), Named(TypeWithName { name: "z", ty: F64 }), Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 })] } }, "packet_abilities": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "flags", ty: I8 }), Named(TypeWithName { name: "flyingSpeed", ty: F32 }), Named(TypeWithName { name: "walkingSpeed", ty: F32 })] } }, "packet_use_item": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "hand", ty: VarInt })] } }, "packet_look": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "yaw", ty: F32 }), Named(TypeWithName { name: "pitch", ty: F32 }), Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_entity_action": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "entityId", ty: VarInt }), Named(TypeWithName { name: "actionId", ty: VarInt }), Named(TypeWithName { name: "jumpBoost", ty: VarInt })] } }, "packet_use_entity": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "target", ty: VarInt }), Named(TypeWithName { name: "mouse", ty: VarInt }), Named(TypeWithName { name: "x", ty: Switch { switch: SwitchType { compare_to: "mouse", fields: {"2": F32}, default: Some(Void) } } }), Named(TypeWithName { name: "y", ty: Switch { switch: SwitchType { compare_to: "mouse", fields: {"2": F32}, default: Some(Void) } } }), Named(TypeWithName { name: "z", ty: Switch { switch: SwitchType { compare_to: "mouse", fields: {"2": F32}, default: Some(Void) } } }), Named(TypeWithName { name: "hand", ty: Switch { switch: SwitchType { compare_to: "mouse", fields: {"2": VarInt, "0": VarInt}, default: Some(Void) } } })] } }, "packet": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "name", ty: Mapper { mapper: MapperType { ty: VarInt, mappings: {"0x01": "tab_complete", "0x17": "crafting_book_data", "0x05": "transaction", "0x11": "steer_boat", "0x14": "block_dig", "0x1f": "block_place", "0x1d": "arm_animation", "0x0b": "keep_alive", "0x02": "chat", "0x06": "enchant_item", "0x12": "craft_recipe_request", "0x0d": "position", "0x16": "steer_vehicle", "0x18": "resource_pack_receive", "0x04": "settings", "0x1c": "update_sign", "0x1e": "spectate", "0x20": "use_item", "0x09": "custom_payload", "0x0c": "flying", "0x15": "entity_action", "0x00": "teleport_confirm", "0x07": "window_click", "0x13": "abilities", "0x0e": "position_look", "0x1b": "set_creative_slot", "0x08": "close_window", "0x03": "client_command", "0x0a": "use_entity", "0x1a": "held_item_slot", "0x0f": "look", "0x10": "vehicle_move", "0x19": "advancement_tab"} } } }), Named(TypeWithName { name: "params", ty: Switch { switch: SwitchType { compare_to: "name", fields: {"advancement_tab": NonNativeType("packet_advancement_tab"), "client_command": NonNativeType("packet_client_command"), "chat": NonNativeType("packet_chat"), "craft_recipe_request": NonNativeType("packet_craft_recipe_request"), "look": NonNativeType("packet_look"), "steer_vehicle": NonNativeType("packet_steer_vehicle"), "spectate": NonNativeType("packet_spectate"), "position_look": NonNativeType("packet_position_look"), "transaction": NonNativeType("packet_transaction"), "teleport_confirm": NonNativeType("packet_teleport_confirm"), "keep_alive": NonNativeType("packet_keep_alive"), "steer_boat": NonNativeType("packet_steer_boat"), "enchant_item": NonNativeType("packet_enchant_item"), "arm_animation": NonNativeType("packet_arm_animation"), "crafting_book_data": NonNativeType("packet_crafting_book_data"), "settings": NonNativeType("packet_settings"), "block_dig": NonNativeType("packet_block_dig"), "block_place": NonNativeType("packet_block_place"), "use_item": NonNativeType("packet_use_item"), "close_window": NonNativeType("packet_close_window"), "tab_complete": NonNativeType("packet_tab_complete"), "use_entity": NonNativeType("packet_use_entity"), "flying": NonNativeType("packet_flying"), "custom_payload": NonNativeType("packet_custom_payload"), "position": NonNativeType("packet_position"), "vehicle_move": NonNativeType("packet_vehicle_move"), "update_sign": NonNativeType("packet_update_sign"), "resource_pack_receive": NonNativeType("packet_resource_pack_receive"), "set_creative_slot": NonNativeType("packet_set_creative_slot"), "entity_action": NonNativeType("packet_entity_action"), "held_item_slot": NonNativeType("packet_held_item_slot"), "window_click": NonNativeType("packet_window_click"), "abilities": NonNativeType("packet_abilities")}, default: None } } })] } }, "packet_steer_vehicle": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "sideways", ty: F32 }), Named(TypeWithName { name: "forward", ty: F32 }), Named(TypeWithName { name: "jump", ty: U8 })] } }, "packet_flying": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "onGround", ty: Bool })] } }, "packet_advancement_tab": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "action", ty: VarInt }), Named(TypeWithName { name: "tabId", ty: Switch { switch: SwitchType { compare_to: "action", fields: {"0": String, "1": Void}, default: None } } })] } }, "packet_crafting_book_data": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "type", ty: VarInt }), Anonymous(AnonymousType { ty: Switch { switch: SwitchType { compare_to: "type", fields: {"1": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "craftingBookOpen", ty: Bool }), Named(TypeWithName { name: "craftingFilter", ty: Bool })] } }, "0": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "displayedRecipe", ty: I32 })] } }}, default: None } }, anon: true })] } }, "packet_set_creative_slot": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "slot", ty: I16 }), Named(TypeWithName { name: "item", ty: Slot })] } }, "packet_custom_payload": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "channel", ty: String }), Named(TypeWithName { name: "data", ty: RestBuffer })] } }, "packet_resource_pack_receive": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "result", ty: VarInt })] } }, "packet_tab_complete": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "text", ty: String }), Named(TypeWithName { name: "assumeCommand", ty: Bool }), Named(TypeWithName { name: "lookedAtBlock", ty: Option { ty: Position } })] } }, "packet_block_dig": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "status", ty: VarInt }), Named(TypeWithName { name: "location", ty: Position }), Named(TypeWithName { name: "face", ty: I8 })] } }, "packet_steer_boat": Container { ty: ContainerType { fields: [Named(TypeWithName { name: "leftPaddle", ty: Bool }), Named(TypeWithName { name: "rightPaddle", ty: Bool })] } }} } } }
