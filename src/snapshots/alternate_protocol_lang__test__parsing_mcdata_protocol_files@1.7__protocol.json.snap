---
source: src/main.rs
expression: result
input_file: minecraft-data/data/pc/1.7/protocol.json
snapshot_kind: text
---
type VarInt = never;
// type f64 = never;
// type i16 = never;
// type i8 = never;
// type i32 = never;
// type UUID = never;
// type EntityMetadata = never;
// type Position = never;
// type u8 = never;
// type bool = never;
// type Slot = never;
// type f32 = never;
type Void = never;
// type i64 = never;
// type OptionalNbt = never;
type RestBuffer = never;
// type Nbt = never;
// type VarLong = never;
// type u16 = never;
type Arr<T> = never;
type BitField<T> = never;
type Buffer<T> = never;
type Record_<K, V, Size = varint> = never;
type topBitSetTerminatedArray<T> = never;
type pstring<T> = never;
type entityMetadataLoop<T> = never;
type option<T> = never;
type String_ = never;
type ParticleData<T> = never;


type UUID = never /* native */


type array = never /* native */


type bitfield = never /* native */


type bool = never /* native */


type buffer = never /* native */


type compressedNbt = never /* native */


type container = never /* native */


type entityMetadata = entityMetadataLoop<{ ty: { _anon_0: BitField<{ fields: [{ name: "key", size: 5, signed: false }, { name: "type", size: 3, signed: false }] }>, value: entityMetadataItem<{ compareTo: "type" }> }, endVal: 127 }>


type entityMetadataItem = { "0": i8 ;"1": i16 ;"2": i32 ;"3": f32 ;"4": String_ ;"5": Slot ;"6": { x: i32, y: i32, z: i32 } ;"7": { pitch: f32, roll: f32, yaw: f32 }; _: Void } /* .get($compareTo) */


type f32 = never /* native */


type f64 = never /* native */


type i16 = never /* native */


type i32 = never /* native */


type i64 = never /* native */


type i8 = never /* native */


type nbt = never /* native */


type position_ibi = { x: i32, y: u8, z: i32 }


type position_iii = { x: i32, y: i32, z: i32 }


type position_isi = { x: i32, y: i16, z: i32 }


type restBuffer = never /* native */


type slot = { _anon_1: { "-1": Void; _: { itemCount: i8, itemDamage: i16, nbtData: compressedNbt } } /* .get(blockId) */, blockId: i16 }


type u16 = never /* native */


type u8 = never /* native */


type varint = never /* native */

namespace handshaking.to_client {

interface packet {
	name: /* empty mapper */ any,
	params: /* empty switch */ any,
}

}
namespace handshaking.to_server {

interface packet {
	name: { 0x00: "set_protocol"; 0xfe: "legacy_server_list_ping"; _ : Void; }[] /* mapper */,
	params: { "legacy_server_list_ping": packet_legacy_server_list_ping ;"set_protocol": packet_set_protocol; _: Void } /* .get(name) */,
}


interface packet_legacy_server_list_ping {
	payload: u8,
}


interface packet_set_protocol {
	protocolVersion: VarInt,
	serverHost: String_,
	serverPort: u16,
	nextState: VarInt,
}

}
namespace status.to_client {

interface packet {
	name: { 0x00: "server_info"; 0x01: "ping"; _ : Void; }[] /* mapper */,
	params: { "ping": packet_ping ;"server_info": packet_server_info; _: Void } /* .get(name) */,
}


interface packet_ping {
	time: i64,
}


interface packet_server_info {
	response: String_,
}

}
namespace status.to_server {

interface packet {
	name: { 0x00: "ping_start"; 0x01: "ping"; _ : Void; }[] /* mapper */,
	params: { "ping": packet_ping ;"ping_start": packet_ping_start; _: Void } /* .get(name) */,
}


interface packet_ping {
	time: i64,
}


interface packet_ping_start {

}

}
namespace login.to_client {

interface packet {
	name: { 0x00: "disconnect"; 0x01: "encryption_begin"; 0x02: "success"; _ : Void; }[] /* mapper */,
	params: { "disconnect": packet_disconnect ;"encryption_begin": packet_encryption_begin ;"success": packet_success; _: Void } /* .get(name) */,
}


interface packet_disconnect {
	reason: String_,
}


interface packet_encryption_begin {
	serverId: String_,
	publicKey: Buffer<{ countType: i16 }>,
	verifyToken: Buffer<{ countType: i16 }>,
}


interface packet_success {
	uuid: String_,
	username: String_,
}

}
namespace login.to_server {

interface packet {
	name: { 0x00: "login_start"; 0x01: "encryption_begin"; _ : Void; }[] /* mapper */,
	params: { "encryption_begin": packet_encryption_begin ;"login_start": packet_login_start; _: Void } /* .get(name) */,
}


interface packet_encryption_begin {
	sharedSecret: Buffer<{ countType: i16 }>,
	verifyToken: Buffer<{ countType: i16 }>,
}


interface packet_login_start {
	username: String_,
}

}
namespace play.to_client {

interface packet {
	name: { 0x00: "keep_alive"; 0x01: "login"; 0x02: "chat"; 0x03: "update_time"; 0x04: "entity_equipment"; 0x05: "spawn_position"; 0x06: "update_health"; 0x07: "respawn"; 0x08: "position"; 0x09: "held_item_slot"; 0x0a: "bed"; 0x0b: "animation"; 0x0c: "named_entity_spawn"; 0x0d: "collect"; 0x0e: "spawn_entity"; 0x0f: "spawn_entity_living"; 0x10: "spawn_entity_painting"; 0x11: "spawn_entity_experience_orb"; 0x12: "entity_velocity"; 0x13: "entity_destroy"; 0x14: "entity"; 0x15: "rel_entity_move"; 0x16: "entity_look"; 0x17: "entity_move_look"; 0x18: "entity_teleport"; 0x19: "entity_head_rotation"; 0x1a: "entity_status"; 0x1b: "attach_entity"; 0x1c: "entity_metadata"; 0x1d: "entity_effect"; 0x1e: "remove_entity_effect"; 0x1f: "experience"; 0x20: "update_attributes"; 0x21: "map_chunk"; 0x22: "multi_block_change"; 0x23: "block_change"; 0x24: "block_action"; 0x25: "block_break_animation"; 0x26: "map_chunk_bulk"; 0x27: "explosion"; 0x28: "world_event"; 0x29: "named_sound_effect"; 0x2a: "world_particles"; 0x2b: "game_state_change"; 0x2c: "spawn_entity_weather"; 0x2d: "open_window"; 0x2e: "close_window"; 0x2f: "set_slot"; 0x30: "window_items"; 0x31: "craft_progress_bar"; 0x32: "transaction"; 0x33: "update_sign"; 0x34: "map"; 0x35: "tile_entity_data"; 0x36: "open_sign_entity"; 0x37: "statistics"; 0x38: "player_info"; 0x39: "abilities"; 0x3a: "tab_complete"; 0x3b: "scoreboard_objective"; 0x3c: "scoreboard_score"; 0x3d: "scoreboard_display_objective"; 0x3e: "scoreboard_team"; 0x3f: "custom_payload"; 0x40: "kick_disconnect"; _ : Void; }[] /* mapper */,
	params: { "abilities": packet_abilities ;"animation": packet_animation ;"attach_entity": packet_attach_entity ;"bed": packet_bed ;"block_action": packet_block_action ;"block_break_animation": packet_block_break_animation ;"block_change": packet_block_change ;"chat": packet_chat ;"close_window": packet_close_window ;"collect": packet_collect ;"craft_progress_bar": packet_craft_progress_bar ;"custom_payload": packet_custom_payload ;"entity": packet_entity ;"entity_destroy": packet_entity_destroy ;"entity_effect": packet_entity_effect ;"entity_equipment": packet_entity_equipment ;"entity_head_rotation": packet_entity_head_rotation ;"entity_look": packet_entity_look ;"entity_metadata": packet_entity_metadata ;"entity_move_look": packet_entity_move_look ;"entity_status": packet_entity_status ;"entity_teleport": packet_entity_teleport ;"entity_velocity": packet_entity_velocity ;"experience": packet_experience ;"explosion": packet_explosion ;"game_state_change": packet_game_state_change ;"held_item_slot": packet_held_item_slot ;"keep_alive": packet_keep_alive ;"kick_disconnect": packet_kick_disconnect ;"login": packet_login ;"map": packet_map ;"map_chunk": packet_map_chunk ;"map_chunk_bulk": packet_map_chunk_bulk ;"multi_block_change": packet_multi_block_change ;"named_entity_spawn": packet_named_entity_spawn ;"named_sound_effect": packet_named_sound_effect ;"open_sign_entity": packet_open_sign_entity ;"open_window": packet_open_window ;"player_info": packet_player_info ;"position": packet_position ;"rel_entity_move": packet_rel_entity_move ;"remove_entity_effect": packet_remove_entity_effect ;"respawn": packet_respawn ;"scoreboard_display_objective": packet_scoreboard_display_objective ;"scoreboard_objective": packet_scoreboard_objective ;"scoreboard_score": packet_scoreboard_score ;"scoreboard_team": packet_scoreboard_team ;"set_slot": packet_set_slot ;"spawn_entity": packet_spawn_entity ;"spawn_entity_experience_orb": packet_spawn_entity_experience_orb ;"spawn_entity_living": packet_spawn_entity_living ;"spawn_entity_painting": packet_spawn_entity_painting ;"spawn_entity_weather": packet_spawn_entity_weather ;"spawn_position": packet_spawn_position ;"statistics": packet_statistics ;"tab_complete": packet_tab_complete ;"tile_entity_data": packet_tile_entity_data ;"transaction": packet_transaction ;"update_attributes": packet_update_attributes ;"update_health": packet_update_health ;"update_sign": packet_update_sign ;"update_time": packet_update_time ;"window_items": packet_window_items ;"world_event": packet_world_event ;"world_particles": packet_world_particles; _: Void } /* .get(name) */,
}


interface packet_abilities {
	flags: i8,
	flyingSpeed: f32,
	walkingSpeed: f32,
}


interface packet_animation {
	entityId: VarInt,
	animation: u8,
}


interface packet_attach_entity {
	entityId: i32,
	vehicleId: i32,
	leash: bool,
}


interface packet_bed {
	entityId: i32,
	location: position_ibi,
}


interface packet_block_action {
	location: position_isi,
	byte1: u8,
	byte2: u8,
	blockId: VarInt,
}


interface packet_block_break_animation {
	entityId: VarInt,
	location: position_iii,
	destroyStage: i8,
}


interface packet_block_change {
	location: position_ibi,
	type: VarInt,
	metadata: u8,
}


interface packet_chat {
	message: String_,
}


interface packet_close_window {
	windowId: u8,
}


interface packet_collect {
	collectedEntityId: i32,
	collectorEntityId: i32,
}


interface packet_craft_progress_bar {
	windowId: u8,
	property: i16,
	value: i16,
}


interface packet_custom_payload {
	channel: String_,
	data: Buffer<{ countType: i16 }>,
}


interface packet_entity {
	entityId: i32,
}


interface packet_entity_destroy {
	entityIds: i32[i8],
}


interface packet_entity_effect {
	entityId: i32,
	effectId: i8,
	amplifier: i8,
	duration: i16,
}


interface packet_entity_equipment {
	entityId: i32,
	slot: i16,
	item: Slot,
}


interface packet_entity_head_rotation {
	entityId: i32,
	headYaw: i8,
}


interface packet_entity_look {
	entityId: i32,
	yaw: i8,
	pitch: i8,
}


interface packet_entity_metadata {
	entityId: i32,
	metadata: entityMetadata,
}


interface packet_entity_move_look {
	entityId: i32,
	dX: i8,
	dY: i8,
	dZ: i8,
	yaw: i8,
	pitch: i8,
}


interface packet_entity_status {
	entityId: i32,
	entityStatus: i8,
}


interface packet_entity_teleport {
	entityId: i32,
	x: i32,
	y: i32,
	z: i32,
	yaw: i8,
	pitch: i8,
}


interface packet_entity_velocity {
	entityId: i32,
	velocityX: i16,
	velocityY: i16,
	velocityZ: i16,
}


interface packet_experience {
	experienceBar: f32,
	level: i16,
	totalExperience: i16,
}


interface packet_explosion {
	x: f32,
	y: f32,
	z: f32,
	radius: f32,
	affectedBlockOffsets: { x: i8, y: i8, z: i8 }[i32],
	playerMotionX: f32,
	playerMotionY: f32,
	playerMotionZ: f32,
}


interface packet_game_state_change {
	reason: u8,
	gameMode: f32,
}


interface packet_held_item_slot {
	slot: i8,
}


interface packet_keep_alive {
	keepAliveId: i32,
}


interface packet_kick_disconnect {
	reason: String_,
}


interface packet_login {
	entityId: i32,
	gameMode: u8,
	dimension: i8,
	difficulty: u8,
	maxPlayers: u8,
	levelType: String_,
}


interface packet_map {
	itemDamage: VarInt,
	data: Buffer<{ countType: i16 }>,
}


interface packet_map_chunk {
	x: i32,
	z: i32,
	groundUp: bool,
	bitMap: u16,
	addBitMap: u16,
	compressedChunkData: Buffer<{ countType: i32 }>,
}


interface packet_map_chunk_bulk {
	chunkColumnCount: Count<{ countFor: "meta", type: i16 }>,
	dataLength: Count<{ countFor: "compressedChunkData", type: i32 }>,
	skyLightSent: bool,
	compressedChunkData: Buffer<{ count: "dataLength" }>,
	meta: Arr<{ referencedLength: "chunkColumnCount", elementType: { addBitMap: u16, bitMap: u16, x: i32, z: i32 } }>,
}


interface packet_multi_block_change {
	chunkX: i32,
	chunkZ: i32,
	recordCount: Count<{ countFor: "records", type: i16 }>,
	dataLength: i32,
	records: Arr<{ referencedLength: "recordCount", elementType: { _anon_2: BitField<{ fields: [{ name: "blockId", size: 12, signed: false }, { name: "metadata", size: 4, signed: false }] }>, _anon_3: BitField<{ fields: [{ name: "x", size: 4, signed: false }, { name: "z", size: 4, signed: false }] }>, y: u8 } }>,
}


interface packet_named_entity_spawn {
	entityId: VarInt,
	playerUUID: String_,
	playerName: String_,
	data: { name: String_, signature: String_, value: String_ }[],
	x: i32,
	y: i32,
	z: i32,
	yaw: i8,
	pitch: i8,
	currentItem: i16,
	metadata: entityMetadata,
}


interface packet_named_sound_effect {
	soundName: String_,
	x: i32,
	y: i32,
	z: i32,
	volume: f32,
	pitch: u8,
}


interface packet_open_sign_entity {
	location: position_iii,
}


interface packet_open_window {
	windowId: u8,
	inventoryType: u8,
	windowTitle: String_,
	slotCount: u8,
	useProvidedTitle: bool,
	entityId: { "11": i32; _: Void } /* .get(inventoryType) */,
}


interface packet_player_info {
	playerName: String_,
	online: bool,
	ping: i16,
}


interface packet_position {
	x: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
	onGround: bool,
}


interface packet_rel_entity_move {
	entityId: i32,
	dX: i8,
	dY: i8,
	dZ: i8,
}


interface packet_remove_entity_effect {
	entityId: i32,
	effectId: i8,
}


interface packet_respawn {
	dimension: i32,
	difficulty: u8,
	gamemode: u8,
	levelType: String_,
}


interface packet_scoreboard_display_objective {
	position: i8,
	name: String_,
}


interface packet_scoreboard_objective {
	name: String_,
	displayText: String_,
	action: i8,
}


interface packet_scoreboard_score {
	itemName: String_,
	action: i8,
	scoreName: { "1": Void; _: String_ } /* .get(action) */,
	value: { "1": Void; _: i32 } /* .get(action) */,
}


interface packet_scoreboard_team {
	team: String_,
	mode: i8,
	name: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	prefix: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	suffix: { "0": String_ ;"2": String_; _: Void } /* .get(mode) */,
	friendlyFire: { "0": i8 ;"2": i8; _: Void } /* .get(mode) */,
	players: { "0": String_[i16] ;"3": String_[i16] ;"4": String_[i16]; _: Void } /* .get(mode) */,
}


interface packet_set_slot {
	windowId: i8,
	slot: i16,
	item: Slot,
}


interface packet_spawn_entity {
	entityId: VarInt,
	type: i8,
	x: i32,
	y: i32,
	z: i32,
	pitch: i8,
	yaw: i8,
	objectData: { intField: i32, velocityX: { "0": Void; _: i16 } /* .get(intField) */, velocityY: { "0": Void; _: i16 } /* .get(intField) */, velocityZ: { "0": Void; _: i16 } /* .get(intField) */ },
}


interface packet_spawn_entity_experience_orb {
	entityId: VarInt,
	x: i32,
	y: i32,
	z: i32,
	count: i16,
}


interface packet_spawn_entity_living {
	entityId: VarInt,
	type: u8,
	x: i32,
	y: i32,
	z: i32,
	yaw: i8,
	pitch: i8,
	headPitch: i8,
	velocityX: i16,
	velocityY: i16,
	velocityZ: i16,
	metadata: entityMetadata,
}


interface packet_spawn_entity_painting {
	entityId: VarInt,
	title: String_,
	location: position_iii,
	direction: i32,
}


interface packet_spawn_entity_weather {
	entityId: VarInt,
	type: i8,
	x: i32,
	y: i32,
	z: i32,
}


interface packet_spawn_position {
	location: position_iii,
}


interface packet_statistics {
	entries: { name: String_, value: VarInt }[],
}


interface packet_tab_complete {
	matches: String_[],
}


interface packet_tile_entity_data {
	location: position_isi,
	action: u8,
	nbtData: compressedNbt,
}


interface packet_transaction {
	windowId: u8,
	action: i16,
	accepted: bool,
}


interface packet_update_attributes {
	entityId: i32,
	properties: { key: String_, modifiers: { amount: f64, operation: i8, uuid: UUID }[i16], value: f64 }[i32],
}


interface packet_update_health {
	health: f32,
	food: i16,
	foodSaturation: f32,
}


interface packet_update_sign {
	location: position_isi,
	text1: String_,
	text2: String_,
	text3: String_,
	text4: String_,
}


interface packet_update_time {
	age: i64,
	time: i64,
}


interface packet_window_items {
	windowId: u8,
	items: Slot[i16],
}


interface packet_world_event {
	effectId: i32,
	location: position_ibi,
	data: i32,
	global: bool,
}


interface packet_world_particles {
	particleName: String_,
	x: f32,
	y: f32,
	z: f32,
	offsetX: f32,
	offsetY: f32,
	offsetZ: f32,
	particleData: f32,
	particles: i32,
}

}
namespace play.to_server {

interface packet {
	name: { 0x00: "keep_alive"; 0x01: "chat"; 0x02: "use_entity"; 0x03: "flying"; 0x04: "position"; 0x05: "look"; 0x06: "position_look"; 0x07: "block_dig"; 0x08: "block_place"; 0x09: "held_item_slot"; 0x0a: "arm_animation"; 0x0b: "entity_action"; 0x0c: "steer_vehicle"; 0x0d: "close_window"; 0x0e: "window_click"; 0x0f: "transaction"; 0x10: "set_creative_slot"; 0x11: "enchant_item"; 0x12: "update_sign"; 0x13: "abilities"; 0x14: "tab_complete"; 0x15: "settings"; 0x16: "client_command"; 0x17: "custom_payload"; _ : Void; }[] /* mapper */,
	params: { "abilities": packet_abilities ;"arm_animation": packet_arm_animation ;"block_dig": packet_block_dig ;"block_place": packet_block_place ;"chat": packet_chat ;"client_command": packet_client_command ;"close_window": packet_close_window ;"custom_payload": packet_custom_payload ;"enchant_item": packet_enchant_item ;"entity_action": packet_entity_action ;"flying": packet_flying ;"held_item_slot": packet_held_item_slot ;"keep_alive": packet_keep_alive ;"look": packet_look ;"position": packet_position ;"position_look": packet_position_look ;"set_creative_slot": packet_set_creative_slot ;"settings": packet_settings ;"steer_vehicle": packet_steer_vehicle ;"tab_complete": packet_tab_complete ;"transaction": packet_transaction ;"update_sign": packet_update_sign ;"use_entity": packet_use_entity ;"window_click": packet_window_click; _: Void } /* .get(name) */,
}


interface packet_abilities {
	flags: i8,
	flyingSpeed: f32,
	walkingSpeed: f32,
}


interface packet_arm_animation {
	entityId: i32,
	animation: i8,
}


interface packet_block_dig {
	status: i8,
	location: position_ibi,
	face: i8,
}


interface packet_block_place {
	location: position_ibi,
	direction: i8,
	heldItem: Slot,
	cursorX: i8,
	cursorY: i8,
	cursorZ: i8,
}


interface packet_chat {
	message: String_,
}


interface packet_client_command {
	payload: i8,
}


interface packet_close_window {
	windowId: u8,
}


interface packet_custom_payload {
	channel: String_,
	data: Buffer<{ countType: i16 }>,
}


interface packet_enchant_item {
	windowId: i8,
	enchantment: i8,
}


interface packet_entity_action {
	entityId: i32,
	actionId: i8,
	jumpBoost: i32,
}


interface packet_flying {
	onGround: bool,
}


interface packet_held_item_slot {
	slotId: i16,
}


interface packet_keep_alive {
	keepAliveId: i32,
}


interface packet_look {
	yaw: f32,
	pitch: f32,
	onGround: bool,
}


interface packet_position {
	x: f64,
	stance: f64,
	y: f64,
	z: f64,
	onGround: bool,
}


interface packet_position_look {
	x: f64,
	stance: f64,
	y: f64,
	z: f64,
	yaw: f32,
	pitch: f32,
	onGround: bool,
}


interface packet_set_creative_slot {
	slot: i16,
	item: Slot,
}


interface packet_settings {
	locale: String_,
	viewDistance: i8,
	chatFlags: i8,
	chatColors: bool,
	difficulty: u8,
	showCape: bool,
}


interface packet_steer_vehicle {
	sideways: f32,
	forward: f32,
	jump: bool,
	unmount: bool,
}


interface packet_tab_complete {
	text: String_,
}


interface packet_transaction {
	windowId: i8,
	action: i16,
	accepted: bool,
}


interface packet_update_sign {
	location: position_isi,
	text1: String_,
	text2: String_,
	text3: String_,
	text4: String_,
}


interface packet_use_entity {
	target: i32,
	mouse: i8,
	x: { "2": f32; _: Void } /* .get(mouse) */,
	y: { "2": f32; _: Void } /* .get(mouse) */,
	z: { "2": f32; _: Void } /* .get(mouse) */,
}


interface packet_window_click {
	windowId: i8,
	slot: i16,
	mouseButton: i8,
	action: i16,
	mode: i8,
	item: Slot,
}

}
